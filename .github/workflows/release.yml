name: Release

on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      upload-url: ${{ steps.run-release-drafter.outputs.upload_url }}
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: |
            bash -o pipefail -c "poetry version | awk '{ print \$2 }'"

      - name: Bump version for developmental release
        if: "! steps.check-version.outputs.tag"
        run: |
          poetry version patch &&
          version=$(poetry version | awk '{ print $2 }') &&
          poetry version $version.dev.$(date +%s)

      - name: Build package
        run: |
          poetry build --ansi

      - name: Publish package on PyPI
        if: steps.check-version.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.6.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Publish package on TestPyPI
        continue-on-error: true
        if: "! steps.check-version.outputs.tag"
        uses: pypa/gh-action-pypi-publish@v1.6.4
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish the release notes
        id: run-release-drafter
        uses: release-drafter/release-drafter@v5.22.0
        with:
          publish: ${{ steps.check-version.outputs.tag != '' }}
          tag: ${{ steps.check-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build packages
    needs: release
    if: needs.release.outputs.upload-url
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        fail-fast: false
        include:
          - os: ubuntu-latest
            TARGET: linux
            CMD_BUILD: >
                poetry run pyinstaller --clean -F --hidden-import audible_cli -n audible -c pyi_entrypoint.py &&
                cd dist/ &&
                zip -r9 audible_linux_ubuntu_latest audible
            OUT_FILE_NAME: audible_linux_ubuntu_latest.zip
            ASSET_MIME: application/zip  # application/octet-stream

          - os: ubuntu-18.04
            TARGET: linux
            CMD_BUILD: >
                poetry run pyinstaller --clean -F --hidden-import audible_cli -n audible -c pyi_entrypoint.py &&
                cd dist/ &&
                zip -r9 audible_linux_ubuntu_18_04 audible
            OUT_FILE_NAME: audible_linux_ubuntu_18_04.zip
            ASSET_MIME: application/zip  # application/octet-stream

          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
                poetry run pyinstaller --clean -F --hidden-import audible_cli -n audible -c pyi_entrypoint.py &&
                cd dist/ &&
                zip -r9 audible_mac audible
            OUT_FILE_NAME: audible_mac.zip
            ASSET_MIME: application/zip

          - os: macos-latest
            TARGET: macos
            CMD_BUILD: >
                poetry run pyinstaller --clean -D --hidden-import audible_cli -n audible -c pyi_entrypoint.py &&
                cd dist/ &&
                zip -r9 audible_mac_dir audible
            OUT_FILE_NAME: audible_mac_dir.zip
            ASSET_MIME: application/zip

          - os: windows-latest
            TARGET: windows
            CMD_BUILD: >
                poetry run pyinstaller --clean -D --hidden-import audible_cli -n audible -c pyi_entrypoint.py &&
                cd dist/ &&
                powershell Compress-Archive audible audible_win_dir.zip
            OUT_FILE_NAME: audible_win_dir.zip
            ASSET_MIME: application/zip

          - os: windows-latest
            TARGET: windows
            CMD_BUILD: >
                poetry run pyinstaller --clean -F --hidden-import audible_cli -n audible -c pyi_entrypoint.py &&
                cd dist/ &&
                powershell Compress-Archive audible.exe audible_win.zip
            OUT_FILE_NAME: audible_win.zip
            ASSET_MIME: application/zip

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Upgrade pip
      run: |
        pip install --constraint=.github/workflows/constraints.txt pip
        pip --version

    - name: Install Poetry
      run: |
        pip install --constraint=.github/workflows/constraints.txt poetry
        poetry --version

    - name: Install dependencies
      run: |
        poetry install
        poetry env list --full-path

    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: |
        ${{matrix.CMD_BUILD}}

    - name: Get Release Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=${{needs.release.outputs.upload-url}}
        echo "upload_url={value}" >> $GITHUB_OUTPUT

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
        asset_name: ${{ matrix.OUT_FILE_NAME }}
        asset_content_type: ${{ matrix.ASSET_MIME }}